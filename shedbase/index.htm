<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SHEDBASE</title>
    <script type="module">
        import { get, set } from 'https://unpkg.com/idb-keyval@5.0.2/dist/esm/index.js';

        // Provide a clickable element with ID "directory-button". This can be used to select a directory
        // whose handle will be stored for later use.
        // When a directory is available, "data-directory-available" will be added to the document's body
        // and a "directory-available" bubbling event will be dispatched to the document's body.

        const eventKey = "directory-available";
        const dataKey = "directory-handle";
        const selector = `#directory-button`;
        const propertyKey = "localDirectory";

        let directory_;

        Object.defineProperty(document, propertyKey, {
            get: () => directory_
        });

        async function verifyPermission(fileHandle, readWrite) {
            const options = {};
            if (readWrite) {
                options.mode = 'readwrite';
            }

            // Check if permission was already granted. If so, return true.
            // if ((await fileHandle.queryPermission(options)) === 'granted') {
            //     return true;
            // }

            // Request permission. If the user grants permission, return true.
            if ((await fileHandle.requestPermission(options)) === 'granted') {
                return true;
            }

            // The user didn't grant permission, so return false.
            return false;
        }

        async function isReadable(directory) {
            if (directory === undefined) {
                return false;
            }

            const granted = await verifyPermission(directory, true);
            if (!granted) {
                return false;
            }

            try {
                for await (const entry of directory.values()) {
                    // console.log(entry.kind, entry.name);
                    return true;
                }
                return true;
            } catch (e) {
            }

            return false;
        }

        async function init() {
            if (!('showOpenFilePicker' in self)) {
                return;
            }

            const context = document.body;

            let handle = await get(dataKey);

            const btn = document.querySelector(selector) ?? undefined;

            if (btn !== undefined) {
                btn.addEventListener("click", async () => {

                    const name = context.dataset.appName ?? globalThis.appName ?? document.location.hostname ?? "unnamed";

                    handle = await self.showDirectoryPicker({
                        id: name,
                        suggestedName: name,
                        startIn: "documents",
                    });

                    if (await isReadable(handle)) {
                        await set(dataKey, handle);
                        directory_ = handle;
                        context.dataset.directoryAvailable = handle.name;
                        context.dispatchEvent(new Event(eventKey, { bubbles: true }));
                    }
                });
            }

            if (await isReadable(handle)) {
                directory_ = handle;
                context.dataset.directoryAvailable = handle.name;
                context.dispatchEvent(new Event(eventKey, { bubbles: true }));
            }
        }

        await init();
        
    </script>
    <script type="module">
        // import { directory } from "./directory.js";

        (async () => {
            const appName = "NHSResearch";

            document.body.dataset.appName = appName;

            const d = document.localDirectory;
            if (d === undefined) {
                document.addEventListener("directory-available", () => {
                    console.log(document.localDirectory.name);
                });
            }

            ////////////////////////////////////////////////////////////////

            function qs(selector, context = document) {
                if (context === undefined) return undefined;
                return context.querySelector(selector) ?? undefined;
            }

            function qsa(selector, context = document) {
                if (context === undefined) return [];
                return [...context.querySelectorAll(selector)];
            }

            function e(tagName) {
                return document.createElement(tagName);
            }

            ////////////////////////////////////////////////////////////////

            const formatters = {
                lowercase: (t) => t.toLowerCase(),
                uppercase: (t) => t.toUpperCase(),
            };

            ////////////////////////////////////////////////////////////////

            function separatedList(text, separator = " ") {
                if (text === undefined) { return undefined; }
                return text.split(separator).map(t => t.trim()).filter(t => t !== "");
            }

            function namedList(text, separator = " ") {
                const pieces = separatedList(text, "=");
                if (pieces && pieces.length === 2) {
                    return { name: pieces[0], value: separatedList(pieces[1], separator) };
                }
                return { value: separatedList(text, separator) };
            }

            function urlParametersToHTML() {
                const params = new URLSearchParams(document.location.search);

                function adjustParameters() {
                    if (!params.has("page")) {
                        if (params.has("id")) {
                            params.set("page", "one");
                        } else if (params.has("tags") || params.has("list")) {
                            params.set("page", "many");
                        } else {
                            params.set("page", "many");
                        }
                    }
                }

                adjustParameters();

                const c = qs(`#url-parameters`);
                for (const [k, v] of params.entries()) {
                    const description = qs(`#url-parameter-descriptions > [data-id='${k}']`);
                    const displayName = qs(".name", description)?.innerText;

                    const p = e("div");
                    p.classList.add("url-parameter");

                    const name = e("div");
                    name.classList.add("name");
                    name.dataset.value = k;
                    name.innerText = displayName ?? k.toUpperCase();

                    const value = e("div");
                    value.classList.add("value");

                    const separator = description?.dataset.separator;
                    if (separator !== undefined) {
                        const list = namedList(v, separator);
                        p.dataset.separator = separator;

                        const title = e("div");
                        title.classList.add("title");

                        if (list.name !== undefined) {
                            title.innerText = list.name;
                        }

                        const l = e("ol");

                        value.append(title, l);

                        for (const item of list.value) {
                            const i = e("li");
                            i.dataset.value = item;
                            i.innerText = item.toUpperCase();

                            l.append(i);
                        }

                    } else {
                        value.dataset.value = v;
                        value.innerText = v.toUpperCase();
                    }

                    p.append(name, value);

                    c.append(p);
                }

            }

            function htmlToURLParameters() {
                const parameters = qsa("#url-parameters .url-parameter");
                const params = new URLSearchParams();
                for (const p of parameters) {
                    const name = qs(".name", p)?.dataset.value;
                    const value = (() => {
                        const v = qs(".value", p);
                        if (v !== undefined) {
                            const separator = p.dataset.separator;
                            if (separator !== undefined) {
                                const title = qs(".title", v);
                                const values = qsa("ol li", v).map(li => li.dataset.value).join(separator);
                                return (title != undefined) && (title.innerText !== "") ? `${title.innerText}=${values}` : values;
                            } else {
                                return v.dataset.value;
                            }
                        }
                    })() ?? "";

                    params.append(name, value);
                }
                return params;
            }

            function processURLParameters() {

            }

            urlParametersToHTML();
            console.log(htmlToURLParameters().toString());

        })();
    </script>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica,
                Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
            padding: 0 15px;
            max-width: 650px;
            font-size: 115%;
            line-height: 1.4;
        }

        h1 {
            font-size: 1.5rem;
        }

        img {
            max-width: 100%;
        }

        a {
            text-decoration: none;
        }

        ol {
            margin: 0;
        }

        .next-child {
            display: none;
        }

        .next-child:has(+ * > *) {
            display: block;
        }

        .positive {
            display: block;
        }

        body[data-negative] .positive {
            display: none;
        }

        .negative {
            display: none;
        }

        body[data-negative] .negative {
            display: block;
        }

        .url-parameter {
            padding: 0.5rem;
        }

        .name {
            font-weight: bold;
        }

        .value {
            font-style: italic;
        }

        #url-parameters {
            background-color: antiquewhite;
        }

        #tags {
            background-color: aliceblue;
        }

        #link-generators {
            background-color: yellow;
        }

        #directory-available {
            display: none;
        }

        body[data-directory-available] #directory-available {
            display: block;
        }

        body[data-directory-available] #directory-button {
            display: none;
        }
    </style>
</head>

<body>
    <div id="directory-available">CONNECTED TO LOCAL FOLDER</div>
    <button id="directory-button">CONNECT TO LOCAL FOLDER...</button>
    <div id="url-parameters">
    </div>
    <div id="url-parameter-descriptions">
        <div data-id="list" data-separator=" " data-kind="entity">
            <div class="name">List</div>
        </div>
        <div data-id="tags" data-separator=" " data-kind="tag">
            <div class="name">Tags</div>
        </div>
        <div data-id="id" data-kind="entity">
            <div class="name">ID</div>
        </div>
        <div data-id="terms" data-separator=",">
            <div class="name">Terms</div>
        </div>
        <div data-id="page" data-options="one many">
            <div class="name">Page</div>
        </div>
    </div>
    <div id="formatters">
        <div class="formatter" data-id="lowercase">
            <div class="name">lower case</div>
        </div>
        <div class="formatter" data-id="uppercase">
            <div class="name">UPPER CASE</div>
        </div>
        <!-- <div class="formatter" data-id="url-name">
            <div class="name">url-name</div>
        </div> -->
    </div>
    <div id="tags">
        <div data-category="region">
            <div class="name">Region</div>
            <div data-id="east">East</div>
            <div data-id="london">London</div>
            <div data-id="midlands">Midlands</div>
            <div data-id="northeast">North East</div>
            <div data-id="northwest">North West</div>
            <div data-id="southeast">South East</div>
            <div data-id="southwest">South West</div>
            <div data-id="england">England</div>
            <div data-id="scotland">Scotland</div>
        </div>
        <div data-category="organisation">
            <div class="name">Organisation</div>
            <div data-id="nhs_trust">Trust</div>
            <div data-id="foundation_trust">Foundation</div>
            <div data-id="nhs_board">Board</div>
        </div>
        <div data-category="service">
            <div class="name">Service</div>
            <div data-id="ambulance_trust">Ambulance</div>
            <div data-id="community_services_trust">Community Services</div>
            <div data-id="hospital_trust">Hospital</div>
            <div data-id="major_ae">Major A & E</div>
            <div data-id="mental_health_trust">Mental Health</div>
            <div data-id="Teaching" data-property="name" data-regex="\bTeaching\b">Teaching</div>
            <div data-id="University" data-property="name" data-regex="\bUniversity\b">University</div>
        </div>
    </div>
    <div id="link-generators">
        <div class="link-generator" data-id="website" data-allows-terms>
            <div class="name">Website</div>
            <div class="url" data-property>website</div>
        </div>
        <div class="link-generator" data-id="google" data-allows-terms>
            <div class="name">Google</div>
            <div class="url"></div>
        </div>
        <div class="link-generator" data-id="wdtk" data-allows-terms>
            <div class="name">What Do They Know</div>
            <div class="url" data-property>wdtk</div>
        </div>
    </div>
    <div id="entities">
        <div data-category="trust">
            <div class="name">Trusts & Boards</div>
            <div class="entity" data-id="my-entity-1">
                <div class="name">My Entity 1</div>
            </div>
            <div class="entity" data-id="my-entity-2">
                <div class="name">My Entity 2</div>
                <div class="tags">
                    <div data-tag="major_ae" />
                </div>
            </div>
        </div>
    </div>
    <!--
    If you need to provide an ordered list of entities where the order isn't name order, you can use a list. 
    Otherwise, you can use tags and rely on name-ordering.
    Lists can also be used for trees/hierarchies.
     -->
    <div id="lists">
        <div class="list">
            <div class="name">A List</div>
            <div data-entity="my-entity-1"></div>
            <div data-entity="my-entity-2"></div>
        </div>
        <div class="list">
            <div class="name">A Tree</div>
            <div data-entity="my-entity-2" />
            <div data-entity="my-entity-1" />
            <div class="list">
                <div data-entity="my-entity-2" />
                <div data-entity="my-entity-1" />
            </div>
        </div>
    </div>

    <template id="create-tag">
        <div class="name"></div>
        <div class="id"></div>
    </template>
</body>

</html>